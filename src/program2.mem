00008020   // add $s0, $zero, $zero        // Initialize $s0 to 0 (i.e., $s0 = 0)
20100078   // addi $s0, $zero, 0x78        // Load the first number 0x78 (120 in decimal) into $s0 (i.e., $s0 = 120)
00008820   // add $s1, $zero, $zero        // Initialize $s1 to 0 (i.e., $s1 = 0)
201100b4   // addi $s1, $zero, 0xB4        // Load the second number 0xB4 (180 in decimal) into $s1 (i.e., $s1 = 180)
00009020   // add $s2, $zero, $zero        // Initialize $s2 to 0 (i.e., $s2 = 0)
12110006   // beq $s0, $s1, label          // Check if $s0 == $s1, if true, branch to label (i.e., no branch since $s0 != $s1)
0211482a   // slt $t1, $s0, $s1            // Set $t1 = 1 if $s0 < $s1, otherwise set $t1 = 0 (i.e., $t1 = 1 since 120 < 180)
11200002   // beq $t1, $zero, label        // Check if $t1 == 0, if true, branch to label (i.e., no branch since $t1 = 1)
02308822   // sub $s1, $s1, $s0            // Subtract $s0 from $s1 (i.e., $s1 = 180 - 120 = 60)
08000005   // j label                      // Jump to address 0x5 (start loop or continue logic)
02118022   // sub $s0, $s0, $s1            // Subtract $s1 from $s0 (i.e., $s0 = 120 - 60 = 60)
08000005   // j label                      // Jump again to address 0x5 (loop or continue)
00109020   // add $s2, $zero, $s0          // Copy $s0 into $s2 (i.e., $s2 = 60)
ac120000   // sw $s2, 0($zero)             // Store the value of $s2 (60) into memory at address 0